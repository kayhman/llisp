// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("test.ll", getGlobalContext());
 mod->setDataLayout("e-m:e-i64:64-f80:128-n8:16:32:64-S128");
 mod->setTargetTriple("x86_64-unknown-linux-gnu");
 
 // Type Definitions
 StructType *StructTy_class_std__ios_base__Init = mod->getTypeByName("class.std::ios_base::Init");
 if (!StructTy_class_std__ios_base__Init) {
 StructTy_class_std__ios_base__Init = StructType::create(mod->getContext(), "class.std::ios_base::Init");
 }
 std::vector<Type*>StructTy_class_std__ios_base__Init_fields;
 StructTy_class_std__ios_base__Init_fields.push_back(IntegerType::get(mod->getContext(), 8));
 if (StructTy_class_std__ios_base__Init->isOpaque()) {
 StructTy_class_std__ios_base__Init->setBody(StructTy_class_std__ios_base__Init_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_0 = PointerType::get(StructTy_class_std__ios_base__Init, 0);
 
 PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 PointerType* PointerTy_2 = PointerType::get(PointerTy_1, 0);
 
 std::vector<Type*>StructTy_4_fields;
 StructTy_4_fields.push_back(IntegerType::get(mod->getContext(), 32));
 std::vector<Type*>FuncTy_6_args;
 FunctionType* FuncTy_6 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_6_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_5 = PointerType::get(FuncTy_6, 0);
 
 StructTy_4_fields.push_back(PointerTy_5);
 StructType *StructTy_4 = StructType::get(mod->getContext(), StructTy_4_fields, /*isPacked=*/false);
 
 ArrayType* ArrayTy_3 = ArrayType::get(StructTy_4, 1);
 
 PointerType* PointerTy_7 = PointerType::get(ArrayTy_3, 0);
 
 std::vector<Type*>FuncTy_9_args;
 FuncTy_9_args.push_back(PointerTy_0);
 FunctionType* FuncTy_9 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_9_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_8 = PointerType::get(FuncTy_9, 0);
 
 std::vector<Type*>FuncTy_11_args;
 FuncTy_11_args.push_back(PointerTy_1);
 FunctionType* FuncTy_11 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_11_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_10 = PointerType::get(FuncTy_11, 0);
 
 std::vector<Type*>FuncTy_13_args;
 FuncTy_13_args.push_back(PointerTy_10);
 FuncTy_13_args.push_back(PointerTy_1);
 FuncTy_13_args.push_back(PointerTy_1);
 FunctionType* FuncTy_13 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_13_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_12 = PointerType::get(FuncTy_13, 0);
 
 std::vector<Type*>FuncTy_14_args;
 FunctionType* FuncTy_14 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_14_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_15 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 StructType *StructTy_class_Sexp = mod->getTypeByName("class.Sexp");
 if (!StructTy_class_Sexp) {
 StructTy_class_Sexp = StructType::create(mod->getContext(), "class.Sexp");
 }
 std::vector<Type*>StructTy_class_Sexp_fields;
 StructTy_class_Sexp_fields.push_back(IntegerType::get(mod->getContext(), 8));
 if (StructTy_class_Sexp->isOpaque()) {
 StructTy_class_Sexp->setBody(StructTy_class_Sexp_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_16 = PointerType::get(StructTy_class_Sexp, 0);
 
 StructType *StructTy_class_Env = mod->getTypeByName("class.Env");
 if (!StructTy_class_Env) {
 StructTy_class_Env = StructType::create(mod->getContext(), "class.Env");
 }
 std::vector<Type*>StructTy_class_Env_fields;
 StructTy_class_Env_fields.push_back(IntegerType::get(mod->getContext(), 8));
 if (StructTy_class_Env->isOpaque()) {
 StructTy_class_Env->setBody(StructTy_class_Env_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_17 = PointerType::get(StructTy_class_Env, 0);
 
 std::vector<Type*>FuncTy_19_args;
 FuncTy_19_args.push_back(PointerTy_1);
 FuncTy_19_args.push_back(PointerTy_1);
 FunctionType* FuncTy_19 = FunctionType::get(
  /*Result=*/PointerTy_16,
  /*Params=*/FuncTy_19_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_18 = PointerType::get(FuncTy_19, 0);
 
 
 // Function Declarations
 
 Function* func___cxx_global_var_init = mod->getFunction("__cxx_global_var_init");
 if (!func___cxx_global_var_init) {
 func___cxx_global_var_init = Function::Create(
  /*Type=*/FuncTy_6,
  /*Linkage=*/GlobalValue::InternalLinkage,
  /*Name=*/"__cxx_global_var_init", mod); 
 func___cxx_global_var_init->setCallingConv(CallingConv::C);
 func___cxx_global_var_init->setSection(".text.startup");
 }
 AttributeSet func___cxx_global_var_init_PAL;
 func___cxx_global_var_init->setAttributes(func___cxx_global_var_init_PAL);
 
 Function* func__ZNSt8ios_base4InitC1Ev = mod->getFunction("_ZNSt8ios_base4InitC1Ev");
 if (!func__ZNSt8ios_base4InitC1Ev) {
 func__ZNSt8ios_base4InitC1Ev = Function::Create(
  /*Type=*/FuncTy_9,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"_ZNSt8ios_base4InitC1Ev", mod); // (external, no body)
 func__ZNSt8ios_base4InitC1Ev->setCallingConv(CallingConv::C);
 }
 AttributeSet func__ZNSt8ios_base4InitC1Ev_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func__ZNSt8ios_base4InitC1Ev_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func__ZNSt8ios_base4InitC1Ev->setAttributes(func__ZNSt8ios_base4InitC1Ev_PAL);
 
 Function* func__ZNSt8ios_base4InitD1Ev = mod->getFunction("_ZNSt8ios_base4InitD1Ev");
 if (!func__ZNSt8ios_base4InitD1Ev) {
 func__ZNSt8ios_base4InitD1Ev = Function::Create(
  /*Type=*/FuncTy_9,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"_ZNSt8ios_base4InitD1Ev", mod); // (external, no body)
 func__ZNSt8ios_base4InitD1Ev->setCallingConv(CallingConv::C);
 }
 AttributeSet func__ZNSt8ios_base4InitD1Ev_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func__ZNSt8ios_base4InitD1Ev_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func__ZNSt8ios_base4InitD1Ev->setAttributes(func__ZNSt8ios_base4InitD1Ev_PAL);
 
 Function* func___cxa_atexit = mod->getFunction("__cxa_atexit");
 if (!func___cxa_atexit) {
 func___cxa_atexit = Function::Create(
  /*Type=*/FuncTy_13,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"__cxa_atexit", mod); // (external, no body)
 func___cxa_atexit->setCallingConv(CallingConv::C);
 }
 AttributeSet func___cxa_atexit_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoReturn);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func___cxa_atexit_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func___cxa_atexit->setAttributes(func___cxa_atexit_PAL);
 
 Function* func_main = mod->getFunction("main");
 if (!func_main) {
 func_main = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"main", mod); 
 func_main->setCallingConv(CallingConv::C);
 }
 AttributeSet func_main_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_main->setAttributes(func_main_PAL);
 
 Function* func_boubou = mod->getFunction("boubou");
 if (!func_boubou) {
 func_boubou = Function::Create(
  /*Type=*/FuncTy_19,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"boubou", mod); // (external, no body)
 func_boubou->setCallingConv(CallingConv::C);
 }
 AttributeSet func_boubou_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_boubou_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_boubou->setAttributes(func_boubou_PAL);
 
 Function* func__GLOBAL__I_a = mod->getFunction("_GLOBAL__I_a");
 if (!func__GLOBAL__I_a) {
 func__GLOBAL__I_a = Function::Create(
  /*Type=*/FuncTy_6,
  /*Linkage=*/GlobalValue::InternalLinkage,
  /*Name=*/"_GLOBAL__I_a", mod); 
 func__GLOBAL__I_a->setCallingConv(CallingConv::C);
 func__GLOBAL__I_a->setSection(".text.startup");
 }
 AttributeSet func__GLOBAL__I_a_PAL;
 func__GLOBAL__I_a->setAttributes(func__GLOBAL__I_a_PAL);
 
 // Global Variable Declarations

 
 GlobalVariable* gvar_struct__ZStL8__ioinit = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/StructTy_class_std__ios_base__Init,
 /*isConstant=*/false,
 /*Linkage=*/GlobalValue::InternalLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/"_ZStL8__ioinit");
 gvar_struct__ZStL8__ioinit->setAlignment(1);
 
 GlobalVariable* gvar_int8___dso_handle = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/IntegerType::get(mod->getContext(), 8),
 /*isConstant=*/false,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Initializer=*/0, 
 /*Name=*/"__dso_handle");
 
 GlobalVariable* gvar_ptr_bubu = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/PointerTy_1,
 /*isConstant=*/false,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Initializer=*/0, 
 /*Name=*/"bubu");
 
 GlobalVariable* gvar_array_llvm_global_ctors = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_3,
 /*isConstant=*/false,
 /*Linkage=*/GlobalValue::AppendingLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/"llvm.global_ctors");
 
 // Constant Definitions
 ConstantAggregateZero* const_struct_20 = ConstantAggregateZero::get(StructTy_class_std__ios_base__Init);
 std::vector<Constant*> const_array_21_elems;
 std::vector<Constant*> const_struct_22_fields;
 ConstantInt* const_int32_23 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("65535"), 10));
 const_struct_22_fields.push_back(const_int32_23);
 const_struct_22_fields.push_back(func__GLOBAL__I_a);
 Constant* const_struct_22 = ConstantStruct::get(StructTy_4, const_struct_22_fields);
 const_array_21_elems.push_back(const_struct_22);
 Constant* const_array_21 = ConstantArray::get(ArrayTy_3, const_array_21_elems);
 Constant* const_ptr_24 = ConstantExpr::getCast(Instruction::BitCast, func__ZNSt8ios_base4InitD1Ev, PointerTy_10);
 std::vector<Constant*> const_ptr_25_indices;
 ConstantInt* const_int32_26 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 const_ptr_25_indices.push_back(const_int32_26);
 const_ptr_25_indices.push_back(const_int32_26);
 Constant* const_ptr_25 = ConstantExpr::getGetElementPtr(gvar_struct__ZStL8__ioinit, const_ptr_25_indices);
 ConstantInt* const_int32_27 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantPointerNull* const_ptr_28 = ConstantPointerNull::get(PointerTy_1);
 
 // Global Variable Definitions
 gvar_struct__ZStL8__ioinit->setInitializer(const_struct_20);
 gvar_array_llvm_global_ctors->setInitializer(const_array_21);
 
 // Function Definitions
 
 // Function: __cxx_global_var_init (func___cxx_global_var_init)
 {
  
  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func___cxx_global_var_init,0);
  
  // Block entry (label_entry)
  CallInst* void_29 = CallInst::Create(func__ZNSt8ios_base4InitC1Ev, gvar_struct__ZStL8__ioinit, "", label_entry);
  void_29->setCallingConv(CallingConv::C);
  void_29->setTailCall(false);
  AttributeSet void_29_PAL;
  void_29->setAttributes(void_29_PAL);
  
  std::vector<Value*> int32_30_params;
  int32_30_params.push_back(const_ptr_24);
  int32_30_params.push_back(const_ptr_25);
  int32_30_params.push_back(gvar_int8___dso_handle);
  CallInst* int32_30 = CallInst::Create(func___cxa_atexit, int32_30_params, "", label_entry);
  int32_30->setCallingConv(CallingConv::C);
  int32_30->setTailCall(false);
  AttributeSet int32_30_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoReturn);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   int32_30_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  int32_30->setAttributes(int32_30_PAL);
  
  ReturnInst::Create(mod->getContext(), label_entry);
  
 }
 
 // Function: main (func_main)
 {
  
  BasicBlock* label_entry_32 = BasicBlock::Create(mod->getContext(), "entry",func_main,0);
  
  // Block entry (label_entry_32)
  AllocaInst* ptr_retval = new AllocaInst(IntegerType::get(mod->getContext(), 32), "retval", label_entry_32);
  ptr_retval->setAlignment(4);
  AllocaInst* ptr_s = new AllocaInst(StructTy_class_Sexp, "s", label_entry_32);
  ptr_s->setAlignment(1);
  AllocaInst* ptr_env = new AllocaInst(StructTy_class_Env, "env", label_entry_32);
  ptr_env->setAlignment(1);
  StoreInst* void_33 = new StoreInst(const_int32_26, ptr_retval, false, label_entry_32);
  LoadInst* ptr_34 = new LoadInst(gvar_ptr_bubu, "", false, label_entry_32);
  ptr_34->setAlignment(8);
  std::vector<Value*> ptr_call_params;
  ptr_call_params.push_back(ptr_34);
  ptr_call_params.push_back(const_ptr_28);
  CallInst* ptr_call = CallInst::Create(func_boubou, ptr_call_params, "call", label_entry_32);
  ptr_call->setCallingConv(CallingConv::C);
  ptr_call->setTailCall(false);
  AttributeSet ptr_call_PAL;
  ptr_call->setAttributes(ptr_call_PAL);
  
  ReturnInst::Create(mod->getContext(), const_int32_26, label_entry_32);
  
 }
 
 // Function: _GLOBAL__I_a (func__GLOBAL__I_a)
 {
  
  BasicBlock* label_entry_36 = BasicBlock::Create(mod->getContext(), "entry",func__GLOBAL__I_a,0);
  
  // Block entry (label_entry_36)
  CallInst* void_37 = CallInst::Create(func___cxx_global_var_init, "", label_entry_36);
  void_37->setCallingConv(CallingConv::C);
  void_37->setTailCall(false);
  AttributeSet void_37_PAL;
  void_37->setAttributes(void_37_PAL);
  
  ReturnInst::Create(mod->getContext(), label_entry_36);
  
 }
 
 return mod;
}
